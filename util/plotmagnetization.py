import os
import re
import numpy as np
from collections import defaultdict

import matplotlib.pyplot as plt

def get_magnetization_data(base_path):
    """
    Scans the directory structure to extract magnetization data.

    Args:
        base_path (str): The path to the parent directory containing the
                         'fitting_param_*' folders.

    Returns:
        dict: A dictionary where keys are curve labels (e.g., 'param_4_x')
              and values are dictionaries containing 'h' (field strengths)
              and 'm' (magnetizations).
    """
    data = {}
    param_pattern = re.compile(r"fitting_param_(\d+)_([xyz])")
    h_pattern = re.compile(r"h_(\d+\.\d+)")

    if not os.path.isdir(base_path):
        print(f"Error: Base directory not found at '{base_path}'")
        return data

    for param_dir in sorted(os.listdir(base_path)):
        param_match = param_pattern.match(param_dir)
        if not param_match:
            continue

        param_num = param_match.group(1)
        direction = param_match.group(2)
        label = f"param_{param_num}_{direction}"
        
        current_param_path = os.path.join(base_path, param_dir)
        if not os.path.isdir(current_param_path):
            continue

        h_values = []
        m_values = []

        for h_dir in sorted(os.listdir(current_param_path)):
            h_match = h_pattern.match(h_dir)
            if not h_match:
                continue

            field_strength = float(h_match.group(1))
            data_file = os.path.join(current_param_path, h_dir, "0", "spin_zero.txt")
        
            if os.path.exists(data_file):
                try:
                    # Assuming the file has columns [sx, sy, sz]
                    spins = np.loadtxt(data_file)
                    if spins.ndim == 1: # Handle case with only one row
                        spins = spins.reshape(1, -1)
                    
                    # Calculate the mean of each spin component
                    avg_spins = np.mean(spins, axis=0)
                    
                    # Select the magnetization component along the field direction
                    if direction == 'x':
                        magnetization = avg_spins[0]
                    elif direction == 'y':
                        magnetization = avg_spins[1]
                    else: # direction == 'z'
                        magnetization = avg_spins[2]
                    
                    h_values.append(field_strength)
                    m_values.append(magnetization)

                except Exception as e:
                    print(f"Could not process file {data_file}: {e}")
            else:
                print(f"Data file not found: {data_file}")

        if h_values:
            # Sort data by field strength before storing
            sorted_indices = np.argsort(h_values)
            data[label] = {
                'h': np.array(h_values)[sorted_indices],
                'm': np.array(m_values)[sorted_indices]
            }
            
    return data

def plot_magnetization(data):
    """
    Generates plots of magnetization vs. magnetic field for each parameter set.
    For each set, x and y components are plotted together, and the z component
    is plotted on a separate graph within the same figure.

    Args:
        data (dict): The data dictionary generated by get_magnetization_data.
    """
    plt.style.use('seaborn-v0_8-whitegrid')

    # Group data by parameter number
    grouped_data = defaultdict(dict)
    for label, values in data.items():
        param_num = label.split('_')[1]
        direction = label.split('_')[2]
        grouped_data[param_num][direction] = values

    # Create a plot for each parameter set
    for param_num, plot_data in grouped_data.items():
        # Create a figure with two subplots, one for XY and one for Z
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 16))
        fig.suptitle(f"Magnetization vs. Applied Field for Parameter Set {param_num}", fontsize=16)

        # Plot X and Y components on the first subplot
        if 'x' in plot_data:
            ax1.plot(plot_data['x']['h'], plot_data['x']['m'], marker='o', linestyle='-', label="Direction X")
        if 'y' in plot_data:
            ax1.plot(plot_data['y']['h'], plot_data['y']['m'], marker='o', linestyle='-', label="Direction Y")
        
        ax1.set_ylabel("In-Plane Magnetization (X, Y)")
        ax1.set_title("In-Plane Components")
        ax1.legend(title="Field Direction")
        ax1.grid(True)

        # Plot Z component on the second subplot
        if 'z' in plot_data:
            ax2.plot(plot_data['z']['h'], plot_data['z']['m'], marker='o', linestyle='-', label="Direction Z", color='green')
        
        ax2.set_xlabel("Magnetic Field Strength (h)")
        ax2.set_ylabel("Out-of-Plane Magnetization (Z)")
        ax2.set_title("Out-of-Plane Component")
        ax2.legend(title="Field Direction")
        ax2.grid(True)
        
        plt.tight_layout(rect=[0, 0.03, 1, 0.96]) # Adjust layout to make room for suptitle

        # Save the plot
        output_filename = f"magnetization_param_{param_num}.png"
        plt.savefig(output_filename, dpi=300, bbox_inches='tight')
        print(f"Plot saved to {output_filename}")
        plt.close(fig) # Close the figure to free memory



if __name__ == "__main__":
    # The script is in 'util', so the data is in the parent directory's
    # 'Potential_Param_Scan' folder.
    script_dir = os.path.dirname(os.path.abspath(__file__))
    base_data_path = os.path.abspath(os.path.join(script_dir, '..', 'Potential_Param_Scan'))
    
    magnetization_data = get_magnetization_data(base_data_path)
    
    if magnetization_data:
        plot_magnetization(magnetization_data)
    else:
        print("No data found to plot. Please check the directory structure and file names.")
